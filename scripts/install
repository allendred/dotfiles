#!/usr/bin/env bash

set -e

# 颜色定义
GREEN="\033[0;32m"
BLUE="\033[0;34m"
YELLOW="\033[0;33m"
RED="\033[0;31m"
NC="\033[0m" # No Color

# 配置
CONFIG="install.conf.yaml"
DOTBOT_DIR="dotbot"
DOTBOT_BIN="bin/dotbot"
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PYTHON_VERSION="3.12"

# 导入中国镜像源配置
source "${BASEDIR}/china_mirrors.sh"

# 打印带颜色的信息
echo_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

echo_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

echo_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

echo_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 检查命令是否存在
check_command() {
    if ! command -v $1 &> /dev/null; then
        return 1
    fi
    return 0
}

# 安装zsh
install_zsh() {
    echo_info "正在安装zsh..."
    if [[ "$(uname)" == "Darwin" ]]; then
        # macOS系统使用brew安装
        if check_command brew; then
            brew install zsh
        else
            echo_error "未检测到brew，请先安装Homebrew或手动安装zsh"
            return 1
        fi
    elif [[ "$(uname)" == "Linux" ]]; then
        # Linux系统根据包管理器安装
        if check_command apt; then
            sudo apt update && sudo apt install -y zsh
        elif check_command dnf; then
            sudo dnf install -y zsh
        elif check_command yum; then
            sudo yum install -y zsh
        elif check_command pacman; then
            sudo pacman -S --noconfirm zsh
        else
            echo_error "未检测到支持的包管理器，请手动安装zsh"
            return 1
        fi
    else
        echo_error "不支持的操作系统，请手动安装zsh"
        return 1
    fi
    
    if [ $? -eq 0 ]; then
        echo_success "zsh安装成功"
        return 0
    else
        echo_error "zsh安装失败"
        return 1
    fi
}

# 主函数
main() {
    echo_info "开始安装dotfiles..."
    
    # 切换到项目根目录
    cd "${BASEDIR}/.."
    
    # 检查zsh是否安装
    if ! check_command zsh; then
        echo_warning "zsh未安装"
        read -p "是否安装zsh？(y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            if ! install_zsh; then
                echo_error "zsh安装失败，请手动安装后重试"
                exit 1
            fi
        else
            echo_warning "跳过zsh安装，但可能影响部分功能"
        fi
    else
        echo_info "zsh已安装，跳过安装步骤"
    fi
    
    # 更新子模块
    echo_info "正在同步dotbot子模块..."
    git -C "${DOTBOT_DIR}" submodule sync --quiet --recursive
    git submodule update --init --recursive "${DOTBOT_DIR}"
    
    # 安装uv（Python包管理器）
    if ! check_command uv; then
        echo_info "uv未安装，正在安装..."
        # 使用镜像源或直接源，根据网络情况
        UV_INSTALL_URL=$(get_uv_install_mirror_url)
        
        # 添加重试机制
        MAX_RETRIES=3
        RETRY_COUNT=0
        INSTALL_SUCCESS=false
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$INSTALL_SUCCESS" = "false" ]; do
            echo_info "尝试下载uv (尝试 $((RETRY_COUNT+1))/$MAX_RETRIES)..."
            if curl -LsSf --connect-timeout 30 --retry 3 --retry-delay 5 $UV_INSTALL_URL | sh; then
                echo_success "uv安装成功"
                INSTALL_SUCCESS=true
                # 添加uv到PATH
                export PATH="$HOME/.local/bin:$PATH"
                # 检查uv是否可用
                if ! check_command uv; then
                    echo_warning "uv安装成功但未找到命令，尝试使用完整路径"
                    if [ -f "$HOME/.cargo/bin/uv" ]; then
                        alias uv="$HOME/.cargo/bin/uv"
                        echo_success "已创建uv别名"
                    else
                        echo_error "无法找到uv可执行文件，请检查安装路径"
                        # 尝试查找uv可执行文件
                        UV_PATH=$(find "$HOME" -name "uv" -type f -executable 2>/dev/null | head -n 1)
                        if [ -n "$UV_PATH" ]; then
                            echo_info "找到uv可执行文件: $UV_PATH"
                            alias uv="$UV_PATH"
                            echo_success "已创建uv别名"
                        else
                            INSTALL_SUCCESS=false
                        fi
                    fi
                fi
            else
                RETRY_COUNT=$((RETRY_COUNT+1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                    echo_warning "下载失败，将在5秒后重试..."
                    sleep 5
                fi
            fi
        done
        
        if [ "$INSTALL_SUCCESS" = "false" ]; then
            echo_error "uv安装失败，尝试备用下载方法..."
            # 尝试使用wget作为备用
            if command -v wget &> /dev/null; then
                echo_info "尝试使用wget下载..."
                if wget -O- $UV_INSTALL_URL | sh; then
                    echo_success "使用wget安装uv成功"
                    export PATH="$HOME/.cargo/bin:$PATH"
                    INSTALL_SUCCESS=true
                else
                    echo_error "使用wget安装uv失败"
                fi
            fi
            
            # 如果仍然失败，提示手动安装
            if [ "$INSTALL_SUCCESS" = "false" ]; then
                echo_error "uv安装失败，请手动安装后重试"
                echo_info "您可以尝试手动运行以下命令安装uv:"
                echo "curl -LsSf $UV_INSTALL_URL | sh"
                echo "或者访问 https://github.com/astral-sh/uv 获取更多安装方法"
                exit 1
            fi
        fi
    else
        echo_info "uv已安装，跳过安装步骤"
    fi
    
    # 创建并激活虚拟环境
    echo_info "创建Python ${PYTHON_VERSION}虚拟环境..."
    if uv venv --python ${PYTHON_VERSION}; then
        echo_success "虚拟环境创建成功"
    else
        echo_error "虚拟环境创建失败"
        exit 1
    fi
    
    # 激活虚拟环境
    echo_info "激活虚拟环境..."
    source .venv/bin/activate
    
    # 安装依赖
    echo_info "安装Python依赖..."
    UV_MIRROR_ARGS=$(get_uv_mirror_args)
    uv pip install $UV_MIRROR_ARGS ruamel-yaml ruff ruff-lsp
    
    # 安装oh-my-zsh
    echo_info "检查oh-my-zsh安装状态..."
    if [ ! -d "${HOME}/.oh-my-zsh" ]; then
        echo_info "正在安装oh-my-zsh..."
        OMZ_INSTALL_URL=$(get_omz_install_mirror_url)
        if sh -c "$(curl -fsSL $OMZ_INSTALL_URL)" "" --unattended; then
            echo_success "oh-my-zsh安装成功"
        else
            echo_error "oh-my-zsh安装失败"
            # 继续安装，不退出，因为oh-my-zsh不是必需的
        fi
    else
        echo_info "oh-my-zsh已安装，跳过安装步骤"
    fi
    
    # 运行dotbot
    echo_info "运行dotbot安装脚本..."
    "./${DOTBOT_DIR}/${DOTBOT_BIN}" -d "./" -c "${CONFIG}" "${@}"
    
    echo_success "dotfiles安装完成！"
}

# 执行主函数
main
